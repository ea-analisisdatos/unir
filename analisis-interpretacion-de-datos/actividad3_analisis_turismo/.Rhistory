library(knitr)
library(kableExtra)
# Crear tabla con nombre y tipo
tabla_variables <- tibble(
Variable = names(datos),
Tipo = sapply(datos, function(x) class(x)[1])
)
# Mostrar tabla en formato HTML bonito
kable(tabla_variables, format = "html", caption = "Tipos de variables del dataset de turismo") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Instalar pacman si no está disponible
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
# Usar pacman para instalar y cargar todos los paquetes requeridos
pacman::p_load(
tidyverse, skimr, ggplot2, readr, kableExtra, janitor
)
# URL del dataset publicado por la autora en GitHub
url_datos <- "https://raw.githubusercontent.com/ea-analisisdatos/unir/refs/heads/main/datos/tourism_dataset_5000.csv"
# Leer el archivo CSV desde la URL
datos <- read_csv(url_datos)
# Mostrar primeras filas
head(datos)
# Limpiar los nombres de las columnas con clean_names
datos <- datos %>% janitor::clean_names()
# Vista general de la estructura del dataset
glimpse(datos)
library(knitr)
library(kableExtra)
# Crear tabla con nombre y tipo
tabla_variables <- tibble(
Variable = names(datos),
Tipo = sapply(datos, function(x) class(x)[1])
)
# Mostrar tabla en formato HTML bonito
kable(tabla_variables, format = "html", caption = "Tipos de variables del dataset de turismo") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
# Generar estadísticas descriptivas generales
skim(datos)
# Resumen estructural del dataset
glimpse(datos)
# Estadísticos básicos por variable
summary(datos)
# Calcular estadísticos descriptivos para la variable satisfacción
datos %>%
select(satisfaction) %>%
summary()
# Histograma de la variable satisfacción
ggplot(datos, aes(x = satisfaction)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
geom_vline(xintercept = 7, linetype = "dashed", color = "red") +
labs(title = "Distribución de la satisfacción turística",
x = "Puntuación de satisfacción", y = "Frecuencia")
# Aplicar prueba t para una sola muestra con valor hipotético mu = 7
t.test(datos$satisfaction, mu = 7, alternative = "greater")
# Crear variable categórica para comparar nacionales e internacionales
datos <- datos %>%
mutate(grupo = ifelse(country == "Kenya", "Nacional", "Internacional"))
# Mostrar estructura del objeto y tipos
str(datos)
# Conteo por tipo de variable
map_chr(datos, class) %>%
table()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally)
url_datos <- "https://raw.githubusercontent.com/ea-analisisdatos/unir/refs/heads/main/datos/tourism_dataset_5000.csv"
datos <- read_csv(url_datos)
datos <- janitor::clean_names(datos)
glimpse(datos)
tibble(Variable = names(datos), Tipo = sapply(datos, class)) %>%
kable("html", caption = "Tipos de variables") %>%
kable_styling(full_width = FALSE)
colSums(is.na(datos))
skim(datos)
summary(datos$satisfaction)
ggplot(datos, aes(x = satisfaction)) +
geom_histogram(bins = 15, fill = "steelblue", color = "white") +
geom_vline(xintercept = 7, linetype = "dashed", color = "red") +
labs(title = "Distribución de la satisfacción turística", x = "Satisfacción", y = "Frecuencia")
t.test(datos$satisfaction, mu = 7, alternative = "greater")
datos <- datos %>%
mutate(grupo = ifelse(accessibility, "Accesibilidad", "Sin Accesibilidad"))
datos %>%
group_by(grupo) %>%
summarise(media = mean(satisfaction), sd = sd(satisfaction), n = n())
ggplot(datos, aes(x = grupo, y = satisfaction, fill = grupo)) +
geom_boxplot() +
labs(title = "Satisfacción según accesibilidad", x = "Grupo", y = "Satisfacción")
t.test(satisfaction ~ grupo, data = datos)
datos_numeric <- datos %>% select_if(is.numeric)
GGally::ggcorr(datos_numeric, label = TRUE)
write_csv(datos, "tourism_dataset_5000_limpio.csv")
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally, dplyr, devtools, randomForest)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally, dplyr, devtools, randomForest, sos, matplot)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally, dplyr, devtools, randomForest, sos, matplot)
install.packages("matplot")
help.search('matplot')
# Para demas opciones
install.packages("sos")
library(sos)
findFn("fread")
# Cargar paquete
library(ggplot2)
# Descargar paquete
# detach(package:ggplo2)
# cuando no sepas el nombre de la función
RSiteSearch('matplot')
example(' matplot')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Para demas opciones
install.packages("sos")
library(sos)
findFn("fread")
# Cargar paquete
library(ggplot2)
# Descargar paquete
# detach(package:ggplo2)
# cuando no sepas el nombre de la función
RSiteSearch('matplot')
example(' matplot')
# Para demas opciones
install.packages("sos")
library(sos)
findFn("fread")
install.packages("Rtools")
install.packages("Rtools")
install.packages("C:/Users/esaa2/AppData/Local/Temp/RtmpWCSJ9Y/downloaded_packages/sos_2.1-8.zip", repos = NULL, type = "win.binary")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Para demas opciones
install.packages("sos")
library(sos)
findFn("fread")
# Cargar paquete
library(ggplot2)
# Descargar paquete
# detach(package:ggplo2)
# cuando no sepas el nombre de la función
# RSiteSearch('matplot')
# example(' matplot')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally, dplyr, devtools, stringr, randomForest)
# Para demas opciones
#install.packages("sos")
library(sos)
findFn("fread")
# Cargar paquete
# library(ggplot2)
# Descargar paquete
# detach(package:ggplo2)
# cuando no sepas el nombre de la función
# RSiteSearch('matplot')
# example(' matplot')
url_datos <- "https://raw.githubusercontent.com/ea-analisisdatos/unir/refs/heads/main/datos/tourism_dataset_5000.csv"
datos <- read_csv(url_datos)
datos <- janitor::clean_names(datos)
glimpse(datos)
tibble(Variable = names(datos), Tipo = sapply(datos, class)) %>%
kable("html", caption = "Tipos de variables") %>%
kable_styling(full_width = FALSE)
tabla_variables <- tibble(
Variable = names(datos),
Tipo = sapply(datos, function(x) class(x)[1])
)
kable(tabla_variables, format = "html", caption = "Tipos de variables del dataset de turismo") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
colSums(is.na(datos))
skim(datos)
summary(datos$satisfaction)
ggplot(datos, aes(x = satisfaction)) +
geom_histogram(bins = 15, fill = "steelblue", color = "white") +
geom_vline(xintercept = 7, linetype = "dashed", color = "red") +
labs(title = "Distribución de la satisfacción turística", x = "Satisfacción", y = "Frecuencia")
t.test(datos$satisfaction, mu = 7, alternative = "greater")
datos <- datos %>%
mutate(grupo = ifelse(accessibility, "Accesibilidad", "Sin Accesibilidad"))
datos %>%
group_by(grupo) %>%
summarise(media = mean(satisfaction), sd = sd(satisfaction), n = n())
ggplot(datos, aes(x = grupo, y = satisfaction, fill = grupo)) +
geom_boxplot() +
labs(title = "Satisfacción según accesibilidad", x = "Grupo", y = "Satisfacción")
t.test(satisfaction ~ grupo, data = datos)
datos_numeric <- datos %>% select_if(is.numeric)
GGally::ggcorr(datos_numeric, label = TRUE)
write_csv(datos, "tourism_dataset_5000_limpio.csv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally, dplyr, devtools, stringr, randomForest)
# Para demas opciones
#install.packages("sos")
# library(sos)
# findFn("fread")
# Cargar paquete
# library(ggplot2)
# Descargar paquete
# detach(package:ggplo2)
# cuando no sepas el nombre de la función
# RSiteSearch('matplot')
# example(' matplot')
url_datos <- "https://raw.githubusercontent.com/ea-analisisdatos/unir/refs/heads/main/datos/tourism_dataset_5000.csv"
datos <- read_csv(url_datos)
datos <- janitor::clean_names(datos)
glimpse(datos)
tibble(Variable = names(datos), Tipo = sapply(datos, class)) %>%
kable("html", caption = "Tipos de variables") %>%
kable_styling(full_width = FALSE)
tabla_variables <- tibble(
Variable = names(datos),
Tipo = sapply(datos, function(x) class(x)[1])
)
kable(tabla_variables, format = "html", caption = "Tipos de variables del dataset de turismo") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
colSums(is.na(datos))
skim(datos)
summary(datos$satisfaction)
ggplot(datos, aes(x = satisfaction)) +
geom_histogram(bins = 15, fill = "steelblue", color = "white") +
geom_vline(xintercept = 7, linetype = "dashed", color = "red") +
labs(title = "Distribución de la satisfacción turística", x = "Satisfacción", y = "Frecuencia")
t.test(datos$satisfaction, mu = 7, alternative = "greater")
datos <- datos %>%
mutate(grupo = ifelse(accessibility, "Accesibilidad", "Sin Accesibilidad"))
datos %>%
group_by(grupo) %>%
summarise(media = mean(satisfaction), sd = sd(satisfaction), n = n())
ggplot(datos, aes(x = grupo, y = satisfaction, fill = grupo)) +
geom_boxplot() +
labs(title = "Satisfacción según accesibilidad", x = "Grupo", y = "Satisfacción")
t.test(satisfaction ~ grupo, data = datos)
datos_numeric <- datos %>% select_if(is.numeric)
GGally::ggcorr(datos_numeric, label = TRUE)
write_csv(datos, "tourism_dataset_5000_limpio.csv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally, dplyr, devtools, stringr, randomForest)
# Para demas opciones
#install.packages("sos")
# library(sos)
# findFn("fread")
# Cargar paquete
# library(ggplot2)
# Descargar paquete
# detach(package:ggplo2)
# cuando no sepas el nombre de la función
# RSiteSearch('matplot')
# example(' matplot')
url_datos <- "https://raw.githubusercontent.com/ea-analisisdatos/unir/refs/heads/main/datos/tourism_dataset_5000.csv"
datos <- read_csv(url_datos)
datos <- janitor::clean_names(datos)
glimpse(datos)
tibble(Variable = names(datos), Tipo = sapply(datos, class)) %>%
kable("html", caption = "Tipos de variables") %>%
kable_styling(full_width = FALSE)
tabla_variables <- tibble(
Variable = names(datos),
Tipo = sapply(datos, function(x) class(x)[1])
)
kable(tabla_variables, format = "html", caption = "Tipos de variables del dataset de turismo") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
colSums(is.na(datos))
skim(datos)
summary(datos$satisfaction)
ggplot(datos, aes(x = satisfaction)) +
geom_histogram(bins = 15, fill = "steelblue", color = "white") +
geom_vline(xintercept = 7, linetype = "dashed", color = "red") +
labs(title = "Distribución de la satisfacción turística", x = "Satisfacción", y = "Frecuencia")
t.test(datos$satisfaction, mu = 7, alternative = "greater")
datos <- datos %>%
mutate(grupo = ifelse(accessibility, "Accesibilidad", "Sin Accesibilidad"))
datos %>%
group_by(grupo) %>%
summarise(media = mean(satisfaction), sd = sd(satisfaction), n = n())
ggplot(datos, aes(x = grupo, y = satisfaction, fill = grupo)) +
geom_boxplot() +
labs(title = "Satisfacción según accesibilidad", x = "Grupo", y = "Satisfacción")
t.test(satisfaction ~ grupo, data = datos)
datos_numeric <- datos %>% select_if(is.numeric)
GGally::ggcorr(datos_numeric, label = TRUE)
write_csv(datos, "tourism_dataset_5000_limpio.csv")
options(bitmapType='cairo')
datos_numeric <- datos %>% select_if(is.numeric)
GGally::ggcorr(datos_numeric, label = TRUE)
options(bitmapType='cairo')
library(corrplot)
cor_matrix <- cor(datos_numeric, use = "complete.obs")
corrplot(cor_matrix, method = "color", tl.cex = 0.8)
datos_numeric <- datos %>% select_if(is.numeric)
GGally::ggcorr(datos_numeric, label = TRUE)
options(bitmapType='cairo')
# Calcular la matriz de correlación
cor_matrix <- cor(datos_numeric, use = "complete.obs")
# Instalar si es necesario
if (!requireNamespace("ggcorrplot", quietly = TRUE)) install.packages("ggcorrplot")
# Cargar librería y graficar
library(ggcorrplot)
ggcorrplot(cor_matrix,
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2.5,
colors = c("tomato2", "white", "springgreen3"),
title = "Mapa de calor de correlaciones",
ggtheme = theme_minimal())
# Cargar librería
library(ggcorrplot)
# Seleccionar solo variables numéricas
datos_numeric <- datos %>% select_if(is.numeric)
# Calcular la matriz de correlación
cor_matrix <- cor(datos_numeric, use = "complete.obs")
# Mapa de calor de las correlaciones
ggcorrplot(cor_matrix,
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2.5,
colors = c("tomato2", "white", "springgreen3"),
title = "Mapa de calor de correlaciones",
ggtheme = theme_minimal())
cat('<p align="right"><img src="https://www.unir.net/wp-content/uploads/2019/11/Unir_2021_logo.svg" width="180"/></p>')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally, dplyr, devtools, stringr, randomForest)
# Para demas opciones
#install.packages("sos")
# library(sos)
# findFn("fread")
# Cargar paquete
# library(ggplot2)
# Descargar paquete
# detach(package:ggplo2)
# cuando no sepas el nombre de la función
# RSiteSearch('matplot')
# example(' matplot')
url_datos <- "https://raw.githubusercontent.com/ea-analisisdatos/unir/refs/heads/main/datos/tourism_dataset_5000.csv"
datos <- read_csv(url_datos)
datos <- janitor::clean_names(datos)
glimpse(datos)
tibble(Variable = names(datos), Tipo = sapply(datos, class)) %>%
kable("html", caption = "Tipos de variables") %>%
kable_styling(full_width = FALSE)
tabla_variables <- tibble(
Variable = names(datos),
Tipo = sapply(datos, function(x) class(x)[1])
)
kable(tabla_variables, format = "html", caption = "Tipos de variables del dataset de turismo") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
colSums(is.na(datos))
skim(datos)
summary(datos$satisfaction)
ggplot(datos, aes(x = satisfaction)) +
geom_histogram(bins = 15, fill = "steelblue", color = "white") +
geom_vline(xintercept = 7, linetype = "dashed", color = "red") +
labs(title = "Distribución de la satisfacción turística", x = "Satisfacción", y = "Frecuencia")
t.test(datos$satisfaction, mu = 7, alternative = "greater")
datos <- datos %>%
mutate(grupo = ifelse(accessibility, "Accesibilidad", "Sin Accesibilidad"))
datos %>%
group_by(grupo) %>%
summarise(media = mean(satisfaction), sd = sd(satisfaction), n = n())
ggplot(datos, aes(x = grupo, y = satisfaction, fill = grupo)) +
geom_boxplot() +
labs(title = "Satisfacción según accesibilidad", x = "Grupo", y = "Satisfacción")
t.test(satisfaction ~ grupo, data = datos)
# Cargar librería
library(ggcorrplot)
# Seleccionar solo variables numéricas
datos_numeric <- datos %>% select_if(is.numeric)
# Calcular la matriz de correlación
cor_matrix <- cor(datos_numeric, use = "complete.obs")
# Mapa de calor de las correlaciones
ggcorrplot(cor_matrix,
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2.5,
colors = c("tomato2", "white", "springgreen3"),
title = "Mapa de calor de correlaciones",
ggtheme = theme_minimal())
write_csv(datos, "tourism_dataset_5000_limpio.csv")
cat('<p align="right"><img src="https://www.unir.net/wp-content/uploads/2019/11/Unir_2021_logo.svg" width="180"/></p>')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally, dplyr, devtools, stringr, randomForest)
# Para demas opciones
#install.packages("sos")
# library(sos)
# findFn("fread")
# Cargar paquete
# library(ggplot2)
# Descargar paquete
# detach(package:ggplo2)
# cuando no sepas el nombre de la función
# RSiteSearch('matplot')
# example(' matplot')
url_datos <- "https://raw.githubusercontent.com/ea-analisisdatos/unir/refs/heads/main/datos/tourism_dataset_5000.csv"
datos <- read_csv(url_datos)
datos <- janitor::clean_names(datos)
glimpse(datos)
tibble(Variable = names(datos), Tipo = sapply(datos, class)) %>%
kable("html", caption = "Tipos de variables") %>%
kable_styling(full_width = FALSE)
tabla_variables <- tibble(
Variable = names(datos),
Tipo = sapply(datos, function(x) class(x)[1])
)
kable(tabla_variables, format = "html", caption = "Tipos de variables del dataset de turismo") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
colSums(is.na(datos))
skim(datos)
summary(datos$satisfaction)
ggplot(datos, aes(x = satisfaction)) +
geom_histogram(bins = 15, fill = "steelblue", color = "white") +
geom_vline(xintercept = 7, linetype = "dashed", color = "red") +
labs(title = "Distribución de la satisfacción turística", x = "Satisfacción", y = "Frecuencia")
t.test(datos$satisfaction, mu = 7, alternative = "greater")
datos <- datos %>%
mutate(grupo = ifelse(accessibility, "Accesibilidad", "Sin Accesibilidad"))
datos %>%
group_by(grupo) %>%
summarise(media = mean(satisfaction), sd = sd(satisfaction), n = n())
ggplot(datos, aes(x = grupo, y = satisfaction, fill = grupo)) +
geom_boxplot() +
labs(title = "Satisfacción según accesibilidad", x = "Grupo", y = "Satisfacción")
t.test(satisfaction ~ grupo, data = datos)
# Cargar librería
library(ggcorrplot)
# Seleccionar solo variables numéricas
datos_numeric <- datos %>% select_if(is.numeric)
# Calcular la matriz de correlación
cor_matrix <- cor(datos_numeric, use = "complete.obs")
# Mapa de calor de las correlaciones
ggcorrplot(cor_matrix,
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2.5,
colors = c("tomato2", "white", "springgreen3"),
title = "Mapa de calor de correlaciones",
ggtheme = theme_minimal())
write_csv(datos, "tourism_dataset_5000_limpio.csv")
cat('<p align="right"><img src="https://www.unir.net/wp-content/uploads/2019/11/Unir_2021_logo.svg" width="180"/></p>')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, skimr, ggplot2, readr, kableExtra, janitor, GGally, dplyr, devtools, stringr, randomForest)
# Para demas opciones
#install.packages("sos")
# library(sos)
# findFn("fread")
# Cargar paquete
# library(ggplot2)
# Descargar paquete
# detach(package:ggplo2)
# cuando no sepas el nombre de la función
# RSiteSearch('matplot')
# example(' matplot')
url_datos <- "https://raw.githubusercontent.com/ea-analisisdatos/unir/refs/heads/main/datos/tourism_dataset_5000.csv"
datos <- read_csv(url_datos)
datos <- janitor::clean_names(datos)
glimpse(datos)
tibble(Variable = names(datos), Tipo = sapply(datos, class)) %>%
kable("html", caption = "Tipos de variables") %>%
kable_styling(full_width = FALSE)
tabla_variables <- tibble(
Variable = names(datos),
Tipo = sapply(datos, function(x) class(x)[1])
)
kable(tabla_variables, format = "html", caption = "Tipos de variables del dataset de turismo") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
colSums(is.na(datos))
skim(datos)
summary(datos$satisfaction)
ggplot(datos, aes(x = satisfaction)) +
geom_histogram(bins = 15, fill = "steelblue", color = "white") +
geom_vline(xintercept = 7, linetype = "dashed", color = "red") +
labs(title = "Distribución de la satisfacción turística", x = "Satisfacción", y = "Frecuencia")
t.test(datos$satisfaction, mu = 7, alternative = "greater")
datos <- datos %>%
mutate(grupo = ifelse(accessibility, "Accesibilidad", "Sin Accesibilidad"))
datos %>%
group_by(grupo) %>%
summarise(media = mean(satisfaction), sd = sd(satisfaction), n = n())
ggplot(datos, aes(x = grupo, y = satisfaction, fill = grupo)) +
geom_boxplot() +
labs(title = "Satisfacción según accesibilidad", x = "Grupo", y = "Satisfacción")
t.test(satisfaction ~ grupo, data = datos)
# Cargar librería
library(ggcorrplot)
# Seleccionar solo variables numéricas
datos_numeric <- datos %>% select_if(is.numeric)
# Calcular la matriz de correlación
cor_matrix <- cor(datos_numeric, use = "complete.obs")
# Mapa de calor de las correlaciones
ggcorrplot(cor_matrix,
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2.5,
colors = c("tomato2", "white", "springgreen3"),
title = "Mapa de calor de correlaciones",
ggtheme = theme_minimal())
write_csv(datos, "tourism_dataset_5000_limpio.csv")
gc()
rm(list = ls())
gc()
graphics.off()
rm(mi_dataframe_pesado, otro_objeto)
gc()
